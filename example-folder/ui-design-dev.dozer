{
  "cells": [
    {
      "kind": "markdown",
      "value": "# RooSpawn\n\n### Basic usage\n\nUse `td.add_tasks()` or `td.add_task()` to spawn new tasks. Keep one cell with `td.status()` to observe live preview of the queue.",
      "language": "markdown"
    },
    {
      "kind": "code",
      "value": "\"asdf\"",
      "language": "python"
    },
    {
      "kind": "code",
      "value": "import roospawn as rsp\nrsp.hello()",
      "language": "python"
    },
    {
      "kind": "code",
      "value": "import _roospawn as _rsp",
      "language": "python"
    },
    {
      "kind": "code",
      "value": "_rsp.status()",
      "language": "python"
    },
    {
      "kind": "code",
      "value": "from dataclasses import dataclass\n\n@dataclass\nclass Task:\n    id: str\n    status: str\n    summary: list[str]\n\ntasks = [\n    Task(id=\"10e8f\", status=\"prepared\", summary=[\"Please, write function that calculates the fibbonacii sequence\"]),\n    Task(id=\"d768c\", status=\"queued\", summary=[\"Please, calculate for\", \"using only natural numbers and\", \"of the numbers 1 and 2\"]),\n    #Task(id=\"e5283\", status=\"running\", summary=[\"Please, calculate for\", \"using only natural numbers and\", \"of the numbers 3 and 4\"]),\n    Task(id=\"453f9\", status=\"completed\", summary=[\"Please, calculate for\", \"using only natural numbers and\", \"of the numbers 5 and 6\"]),\n    Task(id=\"453f9\", status=\"hanging\", summary=[\"Please, calculate for\", \"using only natural numbers and\", \"of the numbers 5 and 6\"]),\n    Task(id=\"453f9\", status=\"aborted\", summary=[\"Please, calculate for\", \"using only natural numbers and\", \"of the numbers 5 and 6\"]),\n    Task(id=\"453f9\", status=\"error\", summary=[\"Please, calculate for\", \"using only natural numbers and\", \"of the numbers 5 and 6\"])\n]\n\npauseButton = \"<button>Pause</button>\"\nresumeButton = \"<button>Resume</button>\"\n\nLEN = 25 * 2 + 18\n\ndef render_task(task: Task) -> str:\n    moveUpButton = f\"\"\"\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"14\"\n            height=\"14\"\n            viewBox=\"0 0 24 24\"\n            fill=\"currentcolor\"\n            stroke=\"currentColor\"\n            stroke-width=\"1\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n        >\n        <path d=\"M9 20v-8h-3.586a1 1 0 0 1 -.707 -1.707l6.586 -6.586a1 1 0 0 1 1.414 0l6.586 6.586a1 1 0 0 1 -.707 1.707h-3.586v8a1 1 0 0 1 -1 1h-4a1 1 0 0 1 -1 -1z\" />\n        </svg>\n    \"\"\"\n    moveDownButton = f\"\"\"\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"14\"\n            height=\"14\"\n            viewBox=\"0 0 24 24\"\n            fill=\"currentcolor\"\n            stroke=\"currentColor\"\n            stroke-width=\"1\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n        >\n        <path d=\"M15 4v8h3.586a1 1 0 0 1 .707 1.707l-6.586 6.586a1 1 0 0 1 -1.414 0l-6.586 -6.586a1 1 0 0 1 .707 -1.707h3.586v-8a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1z\" />\n        </svg>\n    \"\"\"\n    deleteButton = f\"\"\"\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"16\"\n            height=\"16\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n        >\n        <path d=\"M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-2\" />\n        <path d=\"M7 11l5 5l5 -5\" />\n        <path d=\"M12 4l0 12\" />\n        </svg>\n    \"\"\"\n\n    return f\"\"\"\n        <div className='{ \"task \" + task.status }'>\n            <div className=\"task-status-badge\">\n                {task.status.replace('hanging', 'asking').replace('error', 'error')}\n            </div>\n\n            <div className=\"task-prompt\">{' ... '.join(task.summary)[:LEN]}</div>\n\n            <div className=\"task-buttons\">\n                {moveUpButton}\n                {moveDownButton}\n                {deleteButton}\n            </div>\n            <div className=\"task-id-wrapper\">\n                <div className=\"task-id\">#{task.id}</div>\n            </div>\n        </div>\n    \"\"\".replace('className', 'class')\n\nstyles = \"\"\"\n.task {\n    padding: 4px 8px;\n    border-radius: 6px;\n    margin: 4px 4px;\n    font-family: system-ui;\n    width: 150px;\n    height: 74px;\n    display: inline-block;\n    position: relative;\n    color: var(--color);\n    user-select: none;\n}\n.task-id-wrapper {\n    position: absolute;\n    bottom: 0px; right: 0px;\n    padding-left: 20px;\n    padding-top: 14px;\n    padding-bottom: 9px;\n    padding-right: 12px;\n    cursor: default;\n    opacity: 0.8;\n}\n.task-id {\n    font-size: 11px;\n    border-bottom: 1px dotted var(--color);\n    font-family: monospace;\n}\n.task-id-wrapper:hover {\n    opacity: 1;\n}\n.task-id-wrapper:hover .task-id {\n    border-bottom: 1px solid var(--color);\n}\n.task-prompt {\n    position: absolute;\n    top: 30px; left: 8px;\n    height: 42px;\n    width: 150px;\n    overflow: hidden;\n    display: inline-block;\n\n    word-break: break-all;\n    white-space: normal;\n\n    font-size: 13px;\n}\n.task-buttons {\n    position: absolute;\n    top: 2px; right: 6px;\n    opacity: 0.6;\n}\n\n.task {\n    --brown: #876d57;\n    --darkbrown: #61544a;\n    --lightbrown: #c4b8ae;\n    --lightbrown: #cac4bf;\n    --transparent-brown: rgba(135, 109, 87, 0.3);\n    --green: #4eb369;\n    --slightlydarkergreen: #42995b;\n    --transparent-green: rgba(78, 179, 105, 0.5);\n    --lightgreen: #89d185;\n    --whitegreen: #a3d1a0;\n    --whitegreen: #b4d2b2;\n    \n    --blue: #008080;\n    --transparent-blue: rgba(0, 128, 128, 0.5);\n    --lightblue: #80d1d1;\n    --whiteblue: #a0d1d1;\n    --whiteblue: #9ac9c9;\n    --whiteblue: #90bcbc;\n\n    --red: #ff0000;\n    --transparent-red: rgba(200, 30, 50, 0.5);\n    --lightred: #d18080;\n    --whitered: #ff8080;\n\n    --prepared-badge: #867465;\n    --queued-badge: rgba(0, 0, 0, 0.25);\n    --running-badge: rgba(0, 0, 0, 0.15);\n    --completed-badge: var(--slightlydarkergreen);\n    --hanging-badge: #a43faf;\n    --aborted-badge: #bb0000;\n    --error-badge: #bb0000;\n}\n.running {\n    background: linear-gradient(\n        270deg, var(--brown) 0%, var(--brown) 20%,\n        var(--green) 40%, var(--green) 60%,\n        var(--brown) 80%, var(--brown) 100%);\n    background-size: 500% 100%;\n    box-shadow: 0 0 2px 0px var(--lightbrown) inset;\n    --color: white;\n    animation: task-running 2s linear infinite;\n}\n@keyframes task-running {\n    0% { background-position: 100% 50%; }\n    50% { background-position: 50% 50%; }\n    100% { background-position: 0% 50%; }\n}\n\n.prepared {\n    background: var(--darkbrown);\n    box-shadow: 0 0 2px 0px var(--lightbrown) inset;\n    --color: white;\n}\n.queued {\n    background: var(--brown);\n    box-shadow: 0 0 2px 0px var(--lightbrown) inset;\n    --color: white;\n}\n.completed {\n    box-shadow: 0 0 2px 0px var(--lightgreen) inset;\n    --color: var(--whitegreen);\n    background: linear-gradient(to bottom, var(--transparent-green) 0%, var(--transparent-green) 80%, var(--transparent-green) 100%);\n}\n.hanging {\n    box-shadow: 0 0 2px 0px var(--lightblue) inset;\n    background: linear-gradient(to bottom, var(--transparent-blue) 0%, var(--transparent-blue) 80%, var(--transparent-blue) 100%);\n    --color: var(--whiteblue); \n}\n.aborted, .error { \n    box-shadow: 0 0 2px 0px var(--lightred) inset;\n    background: linear-gradient(to bottom, var(--transparent-red) 0%, var(--transparent-red) 80%, var(--transparent-red) 100%);\n    --color: var(--whitered);\n}\n\n.task-status-badge {\n    position: absolute;\n    top: 6px; left: 7px;\n    padding: 3px 5px;\n    border-radius: 6px;\n    font-size: 12px;\n    font-weight: bold;\n}\n\n.prepared .task-status-badge {\n    background: var(--prepared-badge);\n}\n.queued .task-status-badge {\n    background: var(--queued-badge);\n}\n.running .task-status-badge {\n    background: var(--running-badge);\n}\n.completed .task-status-badge {\n    background: var(--completed-badge);\n    color: white;\n}\n.hanging .task-status-badge {\n    background: var(--hanging-badge);\n    color: rgba(255, 255, 255, 0.85);\n}\n.aborted .task-status-badge {\n    background: var(--aborted-badge);\n    color: rgba(255, 255, 255, 0.85);\n}\n.error .task-status-badge {\n    background: var(--error-badge);\n    color: rgba(255, 255, 255, 0.85);\n}\n\n.task {\n    box-shadow: 0 0 2px 2px rgba(0, 150, 255) inset;\n    --color: rgba(100, 200, 255);\n}\n\"\"\"\n\ndef render_preview(tasks: list[Task]) -> str:\n    tasks = \"\".join([render_task(task) for task in tasks])\n    return f\"\"\"<div>\n        <style>{styles}</style>\n        <div>{resumeButton}</div>\n        <div>{tasks}</div>\n    </div>\n    \"\"\"\n\ndict(html=render_preview(tasks))",
      "language": "python"
    },
    {
      "kind": "code",
      "value": "_rsp.task",
      "language": "python"
    },
    {
      "kind": "code",
      "value": "dict(html=\"<h1>Test asdf</h1>\")",
      "language": "python"
    },
    {
      "kind": "code",
      "value": "import roospawn as td\ntd.status()",
      "language": "python"
    },
    {
      "kind": "code",
      "value": "# Create some example tasks\nl = rsp.submit_tasks([\n    \"Please, write function that calculates the fibbonacii sequence\",\n    \"Please, calculate for me the sum of the numbers 1 and 2\",\n    \"Please, calculate for me the sum of the numbers 3 and 4\",\n    \"Please, calculate for me the sum of the numbers 5 and 6\"\n])",
      "language": "python"
    },
    {
      "kind": "code",
      "value": "_rsp.disable()",
      "language": "python"
    },
    {
      "kind": "markdown",
      "value": "### Adding tasks later\n\nYou can use `td.add_task()` while other tasks are already running. New tasks are added to the end of the queue.",
      "language": "markdown"
    },
    {
      "kind": "code",
      "value": "# Complete the running task and show updated status\nl[0].conversation_as_json()\n\nimport sys\nprint(sys.version)",
      "language": "python"
    }
  ]
}